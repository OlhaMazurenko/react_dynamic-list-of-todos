{"version":3,"sources":["../../../react_dynamic-list-of-todos2/src/components/User.js","../../../react_dynamic-list-of-todos2/src/components/Todoitem.js","../../../react_dynamic-list-of-todos2/src/components/TodoList.js","../../../react_dynamic-list-of-todos2/src/App.js","../../../react_dynamic-list-of-todos2/src/serviceWorker.js","../../../react_dynamic-list-of-todos2/src/index.js"],"names":["User","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","users","name","Component","TodoItem","className","data","completed","components_User","user","title","TodoList","getItem","bind","assertThisInitialized","filterChanged","items","loaded","requested","filter","url","fetch","then","response","json","_this2","setState","Promise","all","loadUrl","_ref","_ref2","slicedToArray","todos","map","item","objectSpread","find","i","id","userId","event","target","value","trim","_this3","components","includes","Todoitem","key","type","onChange","placeholder","onClick","App","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36edc3a9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass User extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <td>\r\n        {this.props.users.name}\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nexport default User;\r\n","import React, { Component } from \"react\";\r\nimport User from \"./User\";\r\n\r\nclass TodoItem extends Component {\r\n  render() {\r\n      return (\r\n      <tr className={this.props.data.completed ? 'completed' : 'uncompleted'}>\r\n        <User users={this.props.data.user} />\r\n        <td>{this.props.data.title}</td>\r\n        <td>{this.props.data.completed ? 'completed' : 'uncompleted'}</td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from './Todoitem';\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getItem = this.getItem.bind(this);\r\n    this.filterChanged = this.filterChanged.bind(this);\r\n    this.state = {\r\n      items: [],\r\n      loaded: false,\r\n      requested: false,\r\n      filter: ''\r\n    }\r\n  }\r\n\r\n  loadUrl(url) {\r\n    return fetch(url)\r\n      .then(response => response.json()).then(response => response);\r\n  }\r\n\r\n  getItem() {\r\n    this.setState({\r\n      requested: true\r\n    });\r\n\r\n    Promise.all([this.loadUrl(\r\n      'https://jsonplaceholder.typicode.com/todos'),\r\n    this.loadUrl('https://jsonplaceholder.typicode.com/users')\r\n    ]).then(([todos, users]) => this.setState({\r\n      loaded: true,\r\n      items: todos.map((item) => ({\r\n        ...item,\r\n        user: users.find((i) => i.id === item.userId)\r\n      }))\r\n    }));\r\n  }\r\n\r\n  filterChanged(event) {\r\n    this.setState({\r\n     filter: event.target.value.trim()\r\n    });\r\n   }\r\n\r\n  render() {\r\n    if (this.state.loaded) {\r\n      let components = [];\r\n      components = (\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <td>User</td>\r\n              <td>Task</td>\r\n              <td>Status</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {this.state.items.filter(item => (item.user.name.includes(this.state.filter) )).map(item => \r\n          <TodoItem data={item} key={item.title} />)}\r\n          </tbody>\r\n        </table>\r\n      );\r\n      return (\r\n        <div>\r\n          <input className='postSearcher' type='text' onChange={this.filterChanged} placeholder='Search the person'></input>\r\n        {components}\r\n        </div>\r\n        );\r\n        } else {\r\n      return (\r\n        <div>\r\n          <button onClick={this.getItem}>{this.state.requested ? 'loading' : 'load data'}</button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}